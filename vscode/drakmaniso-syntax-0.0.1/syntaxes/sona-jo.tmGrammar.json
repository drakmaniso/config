{
    "fileTypes": [
        "odo",
        "sona-jo",
        "pil"
    ],
    "scopeName": "source.sona-jo",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#comments3"
        },
        {
            "include": "#string-triple"
        },
        {
            "include": "#string-quote"
        },
        {
            "include": "#attribute_with_arguments"
        },
        {
            "include": "#attribute"
        },
        {
            "--match": "(?<!-)\\b(use|import)\\s+(/)?(([[:lower:]][[:word:]-]*)(/))*([[:lower:]][[:word:]-]*)\\b(?!:)",
            "captures": {
                "1": {
                    "name": "keyword.control.import.sona-jo"
                },
                "4": {
                    "name": "entity.name.namespace.sona-jo"
                },
                "6": {
                    "name": "entity.name.namespace.sona-jo"
                }
            }
        },
        {
            "--match": "(?<!-)\\b(use|import)\\s*(([[:lower:]][[:word:]-]*)\\:\\:)*([[:lower:]][[:word:]-]*)\\b",
            "captures": {
                "1": {
                    "name": "keyword.control.import.sona-jo"
                }
            }
        },
        {
            "match": "(?<!-)\\b(module|use|import|from)\\b(?!-|')",
            "name": "keyword.control.import.sona-jo"
        },
        {
            "match": "(?<!-)(\\*operator|\\*fun|\\*val|\\*newtype|\\*struct|\\*union|\\*enum|\\*type|\\*trait)\\b(?!-|')",
            "name": "keyword.other.definition.sona-jo"
        },
        {
            "match": "(?<!-)\\b(val\\?\\?|val\\?|val\\!|let\\?\\?|let\\?|let\\!|else\\?|else\\!|shadow)(?!-|')",
            "name": "keyword.other.definition.sona-jo"
        },
        {
            "match": "(?<!-)\\b(operator|fun|fn|val|const|newtype|struct|union|enum|type|trait|declare|define)\\b(?!-|')",
            "name": "keyword.other.definition.sona-jo"
        },
        {
            "match": "(?<!-)\\b(in)\\b(?!-|')",
            "name": "keyword.other.definition.sona-jo"
        },
        {
            "match": "(?<!-)\\b(as|to|alias)\\b(?!-|')",
            "name": "keyword.control.sona-jo"
        },
        {
            "match": "(?<!-)\\b(ref|publish|tag|static|func|const|lambda|extend|ext|on|is|matches|for|feature|extend|ext|impl|implement|where|derive|implement|impl|auto|dispatch)\\b(?!-|')",
            "name": "keyword.control.sona-jo"
        },
        {
            "match": "(?<!-)\\b(public|data|opaque|pub|local|private)\\b(?!-|')",
            "name": "storage.modifier.sona-jo"
        },
        {
            "match": "(?<!-)\\b(func|method|constant|return)\\b(?!-|')",
            "name": "keyword.control.sona-jo"
        },
        {
            "match": "(?<!-)\\b(require|ensure|invariant|assert|forall)\\b(?!-|')",
            "name": "keyword.control.sona-jo"
        },
        {
            "match": "(?<!-)\\b(if|then|else|case|of|with|case-of|caseof|try|elsif|lastly|default|atlast|when|match|do|end|done|off|ok)\\b(?!-|')",
            "name": "keyword.control.sona-jo"
        },
        {
            "match": "(?<=\\s)(:|::|:::|:=)(?=\\s)",
            "name": "keyword.operator.sona-jo"
        },
        {
            "match": "(?<=\\s)(\\|)(?=[\\s|;])",
            "name": "keyword.operator.pipe.sona-jo"
        },
        {
            "match": "(?<=\\s)(=>)(?=\\s)",
            "name": "keyword.operator.sona-jo"
        },
        {
            "match": "(\\\\)",
            "name": "keyword.operator.sona-jo"
        },
        {
            "match": "(?<=\\s)(->)(?=\\s)",
            "name": "keyword.operator.sona-jo"
        },
        {
            "match": "(?<!-)\\b(is|and|or|not)\\b(?!-|')",
            "name": "keyword.control.logic.sona-jo"
        },
        {
            "match": "(?<!-)\\b(self|any|result|___)\\b(?!-|')",
            "name": "variable.language.sona-jo"
        },
        {
            "match": "(?<!-)\\b(Self)\\b(?!-|')",
            "name": "entity.name.type.language.sona-jo"
        },
        {
            "match": "(?<!-)\\b(def|let)\\b(?!-|')",
            "name": "keyword.other.definition.sona-jo"
        },
        {
            "match": "(?<!-)\\b(var|has)\\b(?!-|')",
            "name": "keyword.control.sona-jo"
        },
        {
            "include": "#monomorphic_type"
        },
        {
            "include": "#type_variable"
        },
        {
            "include": "#trait"
        },
        {
            "match": "(?<!\\.\\.)(?<=\\.)[[:lower:]][[:word:]-]*'*",
            "name": "entity.name.function.sona-jo"
        },
        {
            "match": "(?<!#|-)\\b[[:lower:]][[:word:]-]*'*\\s*(?=\\()",
            "name": "entity.name.function.sona-jo"
        },
        {
            "match": "&[[:lower:]][[:word:]-]*\\b'*",
            "name": "entity.name.type.effect.sona-jo"
        },
        {
            "match": "\\b[[:upper:]]\\b",
            "name": "entity.name.type.sona-jo"
        },
        {
            "match": "(?<!#|-)(?<=\\.)\\b[[:lower:]][[:word:]-]*'*\\s*",
            "name": "entity.name.other.sona-jo"
        },
        {
            "match": "(\\(|\\))",
            "name": "punctuation.brackets.round.sona-jo"
        },
        {
            "match": "(\\[|\\])",
            "name": "punctuation.brackets.square.sona-jo"
        },
        {
            "match": "(\\{|\\})",
            "name": "punctuation.brackets.curly.sona-jo"
        },
        {
            "--begin": "<",
            "--end": ">",
            "--patterns": [
                {
                    "match": "[[:lower:]][[:word:]_'-]*"
                }
            ],
            "--name": "keyword.operator.user.sona-jo",
            "--beginCaptures": {
                "0": {
                    "name": "punctuation.definition.operator.sona-jo"
                }
            },
            "--endCaptures": {
                "0": {
                    "name": "punctuation.definition.operator.sona-jo"
                }
            }
        },
        {
            "match": "(<)[[:lower:]][[:word:]_'-]*(>)",
            "captures": {
                "0": {
                    "name": "keyword.operator.word.sona-jo"
                },
                "1": {
                    "name": "punctuation.definition.operator.sona-jo"
                },
                "2": {
                    "name": "punctuation.definition.operator.sona-jo"
                }
            }
        },
        {
            "match": "(==)|(<)|(>)|(<=)|(>=)",
            "name": "keyword.operator.sona-jo"
        },
        {
            "match": "(=)",
            "name": "keyword.operator.assignment.sona-jo"
        },
        {
            "match": "(\\.\\.\\.)",
            "name": "keyword.operator.splat.sona-jo"
        },
        {
            "match": "(\\.)",
            "name": "keyword.operator.dot-access.sona-jo"
        },
        {
            "match": "(\\:\\:)",
            "name": "keyword.operator.namespace.sona-jo"
        },
        {
            "match": "(,)",
            "name": "punctuation.separator.comma.sona-jo"
        },
        {
            "--match": "(')",
            "--name": "punctuation.separator.singlequote.sona-jo"
        },
        {
            "match": "(`)",
            "name": "punctuation.separator.backquote.sona-jo"
        },
        {
            "match": "(:)",
            "name": "keyword.operator.colon.sona-jo"
        },
        {
            "match": "(\\+\\+)|(\\*\\*)",
            "name": "keyword.operator.sona-jo"
        },
        {
            "match": "(\\+)|(\\-)|(\\/)|(\\*)|(\\^)",
            "name": "keyword.operator.arithmetic.sona-jo"
        },
        {
            "match": "(;)",
            "name": "punctuation.terminator.semicolon.sona-jo"
        },
        {
            "match": "(!)",
            "name": "keyword.operator.bang.sona-jo"
        },
        {
            "match": "\\b([[:lower:]][[:word:]-]*\\b'*)(::)",
            "captures": {
                "1": {
                    "name": "entity.name.namespace"
                },
                "2": {
                    "name": "keyword.operator.namespace.sona-jo"
                }
            }
        },
        {
            "match": "\\b[[:lower:]][[:word:]-]*\\b'*",
            "name": "entity.name.identifier"
        },
        {
            "match": "\\b([0-9]+\\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\\b",
            "name": "constant.numeric.float.sona-jo"
        },
        {
            "match": "\\b([0-9]+)\\b",
            "name": "constant.numeric.sona-jo"
        },
        {
            "match": "\\b(0x[0-9a-fA-F]+)\\b",
            "name": "constant.numeric.sona-jo"
        }
    ],
    "repository": {
        "value-identifier": {
            "match": "(?<!#|-)\\b[[:lower:]][[:word:]-]*\\b'*"
        },
        "function-name": {
            "match": "(?<!#|-)\\b[[:lower:]][[:word:]-]*\\b'*",
            "name": "entity.name.function.sona-jo"
        },
        "operator-name": {
            "match": "(?<!#|-)<[[:word:]-]*'*>",
            "name": "entity.name.function.operator.sona-jo"
        },
        "monomorphic_type": {
            "patterns": [
                {
                    "name": "entity.name.type.sona-jo",
                    "match": "\\b\\p{upper}[[:word:]-]+(\\!|\\b)"
                }
            ]
        },
        "type_variable": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "entity.name.type.parameter.sona-jo"
                        }
                    },
                    "match": "\\b(\\p{upper})\\b"
                }
            ]
        },
        "trait": {
            "patterns": [
                {
                    "name": "entity.name.type.trait.sona-jo",
                    "match": "#\\p{lower}[[:word:]-]*\\b"
                }
            ]
        },
        "attribute_with_arguments": {
            "patterns": [
                {
                    "name": "storage.modifier meta.annotation.sona-jo",
                    "beginCaptures": {
                        "1": {
                            "name": "meta.annotation.identifier.sona-jo"
                        },
                        "2": {
                            "name": "punctuation.brackets.square.sona-jo"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.brackets.square.sona-jo"
                        }
                    },
                    "begin": "(@\\p{word}[[:word:]-]*)(\\()",
                    "end": "(\\))"
                }
            ]
        },
        "attribute": {
            "patterns": [
                {
                    "name": "storage.modifier meta.annotation.sona-jo meta.annotation.identifier.sona-jo",
                    "match": "@\\p{word}[[:word:]-]*\\b"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.sona-jo"
                        }
                    },
                    "begin": "//",
                    "end": "$",
                    "name": "comment.line.double-dash.sona-jo"
                },
                {
                    "include": "#block_comment"
                }
            ]
        },
        "block_comment": {
            "applyEndPatternLast": 1,
            "begin": "/\\*",
            "captures": {
                "0": {
                    "name": "punctuation.definition.comment.sona-jo"
                }
            },
            "end": "\\*/",
            "name": "comment.block.sona-jo",
            "--patterns": [
                {
                    "include": "#block_comment"
                }
            ]
        },
        "comments3": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.sona-jo"
                        }
                    },
                    "begin": "--|##",
                    "end": "$",
                    "name": "comment.line.double-dash.sona-jo"
                },
                {
                    "include": "#block_comment3"
                }
            ]
        },
        "block_comment3": {
            "applyEndPatternLast": 1,
            "begin": "\\*\\*\\*",
            "captures": {
                "0": {
                    "name": "punctuation.definition.comment.sona-jo"
                }
            },
            "end": "\\*\\*\\*",
            "name": "comment.block.sona-jo"
        },
        "string-triple": {
            "name": "string.quoted.triple.elm",
            "begin": "\"\"\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.elm"
                }
            },
            "end": "\"\"\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.elm"
                }
            },
            "patterns": [
                {
                    "match": "\\\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\"'\\&]|x[0-9a-fA-F]{1,5})",
                    "name": "constant.character.escape.elm"
                },
                {
                    "match": "\\^[A-Z@\\[\\]\\\\\\^_]",
                    "name": "constant.character.escape.control.elm"
                }
            ]
        },
        "string-quote": {
            "name": "string.quoted.double.elm",
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.elm"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.elm"
                }
            },
            "patterns": [
                {
                    "match": "\\\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\"'\\&]|x[0-9a-fA-F]{1,5})",
                    "name": "constant.character.escape.elm"
                },
                {
                    "match": "\\^[A-Z@\\[\\]\\\\\\^_]",
                    "name": "constant.character.escape.control.elm"
                }
            ]
        }
    }
}